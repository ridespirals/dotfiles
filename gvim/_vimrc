colorscheme zenburn

set lines=38 columns=150
set scrolloff=10 " number of lines to show around cursor
set guifont=Consolas:h14:cANSI
set relativenumber " relative line numbers
set number " actual line number for current line
set hlsearch " highlight search
set incsearch " incremental search
set expandtab " tabs -> spaces
set tabstop=4 " tab width
set shiftwidth=4 " tab width
set showmode " display current mode
set laststatus=2 " always show status line
set backspace=2 " allow backspacing in insert mode over previously written text
set ignorecase " ignore case when searching
set autoindent " auto indent
set nobackup " no backup
set noswapfile " no swap file
set clipboard^=unnamed " clipboard integration

syntax on

nnoremap <C-Space> :Explore<Enter>

" remap ; => :
nnoremap ; :
"nnoremap : :

let g:netrw_banner = 0
let g:netrw_liststyle=3 " make default :Explore style nicer

if has("gui_running")
    " turn off menu and toolbar
    set guioptions-=T
    set guioptions-=m
end

" auto brackets
inoremap { {<CR>}<Esc>O<TAB>

" show whitespace chars
set listchars=tab:>~,trail:.,nbsp:.,eol:$
set list

" pathogen
execute pathogen#infect()
filetype plugin indent on

" transposing lines - Ctrl+UP or Ctrl+DOWN
function! MoveLineUp()
    call MoveLineOrVisualUp(".", "")
endfunction

function! MoveLineDown()
    call MoveLineOrVisualDown(".", "")
endfunction

function! MoveVisualUp()
    call MoveLineOrVisualUp("'<", "'<,'>")
endfunction

function! MoveVisualDown()
    call MoveLineOrVisualDown("'>", "'<,'>")
endfunction

function! MoveLineOrVisualUp(line_getter, range)
    let l_num = line(a:line_getter)
    if l_num - v:count1 - 1 < 0
        let move_arg = "0"
    else
        let move_arg = a:line_getter." -".(v:count1 + 1)
    endif
    call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
endfunction

function! MoveLineOrVisualDown(line_getter, range)
    let l_num = line(a:line_getter)
    if l_num + v:count1 > line("$")
        let move_arg = "$"
    else
        let move_arg = a:line_getter." +".v:count1
    endif
    call MoveLineOrVisualUpOrDown(a:range."move ".move_arg)
endfunction

function! MoveLineOrVisualUpOrDown(move_arg)
    let col_num = virtcol(".")
    execute "silent! ".a:move_arg
    execute "normal! ".col_num."|"
endfunction

nnoremap <silent> <C-Up> :<C-u>call MoveLineUp()<CR>
nnoremap <silent> <C-Down> :<C-u>call MoveLineDown()<CR>
inoremap <silent> <C-Up> <C-o>:call MoveLineUp()<CR>
inoremap <silent> <C-Down> <C-o>:call MoveLineDown()<CR>
"vnoremap <silent> <C-Up> :<C-u>call MoveVisualUp()<CR>
"vnoremap <silent> <C-Down> :<C-u>call MoveVisualDown()<CR>
xnoremap <silent> <C-Up> :<C-u>call MoveVisualUp()<CR>
xnoremap <silent> <C-Down> :<C-u>call MoveVisualDown()<CR>

